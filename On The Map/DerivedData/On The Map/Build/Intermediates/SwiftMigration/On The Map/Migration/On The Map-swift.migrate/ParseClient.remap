[
 {
  "file": "/Users/Brwong/Desktop/iOS Apps/On The Map/On The Map/ParseClient.swift",
  "offset": 1163,
  "remove": 5900,
  "text": "(\"Get Error client\")\n                completionHandler(result: nil, error: downloadError)\n            } else {\n                UdacityClient.parseJSONWithCompletionHandler(data, completionHandler: completionHandler)\n            }\n        }\n        \n        /* Start the request */\n        task.resume()\n        \n        return task\n    }\n    \n    func taskForPOSTMethod(jsonBody: [String:AnyObject], completionHandler: (result: AnyObject!, error: NSError?) -> Void) -> NSURLSessionDataTask {\n        \n        let urlString = Methods.StudentLocation\n        let url = NSURL(string: urlString)!\n        \n        let request = NSMutableURLRequest(URL: url)\n        var jsonifyError: NSError? = nil\n        request.HTTPMethod = \"POST\"\n        request.addValue(\"QrX47CA9cyuGewLdsL7o5Eb8iug6Em8ye0dnAbIr\", forHTTPHeaderField: \"X-Parse-Application-Id\")\n        request.addValue(\"QuWThTdiRmTux3YaDseUSEpUKo7aBYM737yKd4gY\", forHTTPHeaderField: \"X-Parse-REST-API-Key\")\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        \n        do {\n            request.HTTPBody = try NSJSONSerialization.dataWithJSONObject(jsonBody, options: [])\n        } catch let error as NSError {\n            jsonifyError = error\n            request.HTTPBody = nil\n        }\n        \n        let task = session.dataTaskWithRequest(request) {data, response, downloadError in\n            \n            if let error = downloadError {\n                print(\"Post Error client\")\n                completionHandler(result: nil, error: downloadError)\n            } else {\n                UdacityClient.parseJSONWithCompletionHandler(data, completionHandler: completionHandler)\n            }\n        }\n        \n        task.resume()\n        \n        return task\n    }\n    \n    \n    //Put method to update current user's location - \"Overwrite function\"\n    func taskForQueryMethod(uniqueKey: String, completionHandler: (result: AnyObject!, error: NSError?) -> Void) -> NSURLSessionDataTask {\n        \n        /* Build the URL and configure the request */\n        \n        //Escape the uniqueKey/where clause\n        let dictionary = [\"uniqueKey\": uniqueKey]\n        let jsonData = try? NSJSONSerialization.dataWithJSONObject(dictionary, options: [])\n        let jsonText = NSString(data: jsonData!, encoding: NSASCIIStringEncoding)\n        let jsonDictionary = [\"where\": jsonText!]\n        let escapedParameter = ParseClient.escapedParameters(jsonDictionary)\n        let newString = escapedParameter.stringByReplacingOccurrencesOfString(\":\", withString: \"%3A\", options: NSStringCompareOptions.LiteralSearch, range: nil)\n        \n        //Construct query url\n        let urlString = Methods.QueryStudentLocation + newString\n        let url = NSURL(string: urlString)!\n        \n        let request = NSMutableURLRequest(URL: url)\n        request.addValue(\"QrX47CA9cyuGewLdsL7o5Eb8iug6Em8ye0dnAbIr\", forHTTPHeaderField: \"X-Parse-Application-Id\")\n        request.addValue(\"QuWThTdiRmTux3YaDseUSEpUKo7aBYM737yKd4gY\", forHTTPHeaderField: \"X-Parse-REST-API-Key\")\n        \n        let task = session.dataTaskWithRequest(request) {data, response, downloadError in\n            if let error = downloadError {\n                print(\"Query error client\")\n                completionHandler(result: nil, error: downloadError)\n            } else {\n                let parsedData: AnyObject? = try? NSJSONSerialization.JSONObjectWithData(data, options: NSJSONReadingOptions.AllowFragments)\n                completionHandler(result: parsedData, error: nil)\n            }\n        }\n        \n        task.resume()\n        \n        return task\n    }\n    \n    //Put method to update current user's location - \"Overwrite function\"\n    func taskForPutMethod(objectID: String, jsonBody: [String:AnyObject], completionHandler: (result: AnyObject!, error: NSError?) -> Void) -> NSURLSessionDataTask {\n        \n        /* Build the URL and configure the request */\n        let urlString = Methods.UpdateStudentLocation + objectID\n        let url = NSURL(string: urlString)!\n        let request = NSMutableURLRequest(URL: url)\n        var jsonifyError: NSError? = nil\n        \n        request.HTTPMethod = \"PUT\"\n        request.addValue(\"QrX47CA9cyuGewLdsL7o5Eb8iug6Em8ye0dnAbIr\", forHTTPHeaderField: \"X-Parse-Application-Id\")\n        request.addValue(\"QuWThTdiRmTux3YaDseUSEpUKo7aBYM737yKd4gY\", forHTTPHeaderField: \"X-Parse-REST-API-Key\")\n        request.addValue(\"application/json\", forHTTPHeaderField: \"Content-Type\")\n        do {\n            request.HTTPBody = try NSJSONSerialization.dataWithJSONObject(jsonBody, options: [])\n        } catch let error as NSError {\n            jsonifyError = error\n            request.HTTPBody = nil\n        }\n        \n        /* 4. Make the request */\n        let task = session.dataTaskWithRequest(request) {data, response, downloadError in\n            \n            /* 5/6. Parse the data and use the data (happens in completion handler) */\n            if let error = downloadError {\n                print(\"Update Error client\")\n                completionHandler(result: nil, error: downloadError)\n            } else {\n                UdacityClient.parseJSONWithCompletionHandler(data, completionHandler: completionHandler)\n            }\n        }\n        \n        /* 7. Start the request */\n        task.resume()\n        \n        return task\n    }\n\n    /* Helper Functions */\n    \n    //Given a dictionary of parameters, convert to a string for a url\n    class func escapedParameters(parameters: [String : AnyObject]) -> String {\n        \n        var urlVars = [String]()\n        \n        for (key, value) in parameters {\n            \n            /* Make sure that it is a string value */\n            let stringValue = \"\\(value)\"\n            \n            /* Escape it */\n            let escapedValue = stringValue.stringByAddingPercentEncodingWithAllowedCharacters(NSCharacterSet.URLQueryAllowedCharacterSet())\n            \n            /* Append it */\n            urlVars += [key + \"=\" + \"\\(escapedValue!)\"]\n            \n        }\n        \n        return (!urlVars.isEmpty ? \"?\" : \"\") + urlVars.joinWithSeparator(\"&\"",
 }
]
