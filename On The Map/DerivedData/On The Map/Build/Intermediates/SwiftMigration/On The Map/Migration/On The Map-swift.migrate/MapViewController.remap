[
 {
  "file": "/Users/Brwong/Desktop/iOS Apps/On The Map/On The Map/MapViewController.swift",
  "offset": 699,
  "remove": 6706,
  "text": "let rightPostBarButtonItem: UIBarButtonItem = UIBarButtonItem(image: postImage!, style: UIBarButtonItemStyle.Plain, target: self, action: \"postNewPinButton\")\n        \n        let refreshImage = UIImage(named: \"arrow637\")\n        let refreshMapBarButtonItem: UIBarButtonItem = UIBarButtonItem(image: refreshImage!, style: UIBarButtonItemStyle.Plain, target: self, action: \"refreshData\")\n        \n        self.navigationItem.setRightBarButtonItems([rightPostBarButtonItem, refreshMapBarButtonItem], animated: true)\n        \n        self.refreshData()\n    }\n    \n    override func viewWillAppear(animated: Bool) {\n        super.viewWillAppear(animated)\n        self.refreshData()\n    }\n    \n    // Here we create a view with a \"right callout accessory view\". You might choose to look into other\n    // decoration alternatives. Notice the similarity between this method and the cellForRowAtIndexPath\n    // method in TableViewDataSource.\n    func mapView(mapView: MKMapView, viewForAnnotation annotation: MKAnnotation) -> MKAnnotationView! {\n        \n        let reuseId = \"pin\"\n        \n        var pinView = mapView.dequeueReusableAnnotationViewWithIdentifier(reuseId) as? MKPinAnnotationView\n        \n        if pinView == nil {\n            pinView = MKPinAnnotationView(annotation: annotation, reuseIdentifier: reuseId)\n            pinView!.canShowCallout = true\n            pinView!.pinColor = .Red\n            pinView!.rightCalloutAccessoryView = UIButton(type: .DetailDisclosure)\n        }\n        else {\n            pinView!.annotation = annotation\n        }\n        \n        return pinView\n    }\n    \n    \n    // This delegate method is implemented to respond to taps. It opens the system browser\n    // to the URL specified in the annotationViews subtitle property.\n    func mapView(mapView: MKMapView, annotationView: MKAnnotationView, calloutAccessoryControlTapped control: UIControl) {\n        \n        if control == annotationView.rightCalloutAccessoryView {\n            let app = UIApplication.sharedApplication()\n            app.openURL(NSURL(string: annotationView.annotation.subtitle!)!)\n        }\n    }\n    \n    func retrieveStudentLocations(){\n        //Array of locations to set as pins\n        parseInstance.getStudentLocations { (success, locations, errorString) -> Void in\n            if success{\n                \n                var studentLocations:[[String:AnyObject]] = []\n                studentLocations = locations\n                \n                var annotations = [MKAnnotation]()\n                \n                for dictionary in studentLocations{\n                    // lat and long conversion\n                    let lat = CLLocationDegrees(dictionary[ParseClient.JSONResponseKeys.Latitude] as! Double)\n                    let long = CLLocationDegrees(dictionary[ParseClient.JSONResponseKeys.Longitude] as! Double)\n                    \n                    // lat and long used to create a coordinate\n                    let coordinate = CLLocationCoordinate2D(latitude: lat, longitude: long)\n                    \n                    let first = dictionary[ParseClient.JSONResponseKeys.FirstName] as! String\n                    let last = dictionary[ParseClient.JSONResponseKeys.LastName] as! String\n                    let mediaURL = dictionary[ParseClient.JSONResponseKeys.MediaURL] as! String\n                    \n                    // Here we create the annotation and set its coordiate, title, and subtitle properties\n                    let annotation = MKPointAnnotation()\n                    annotation.coordinate = coordinate\n                    annotation.title = \"\\(first) \\(last)\"\n                    annotation.subtitle = mediaURL\n                    \n                    // Finally we place the annotation in an array of annotations.\n                    annotations.append(annotation)\n                }\n                dispatch_async(dispatch_get_main_queue(), { () -> Void in\n                    // When the array is complete, we add the annotations to the map.\n                    self.mapView.removeAnnotations(self.mapView.annotations)\n                    self.mapView.addAnnotations(annotations)\n                })\n            }else{\n                print(\"Error retrieving locations\")\n            }\n        }\n    }\n\n    func postNewPinButton(){\n\n        //Get user data\n        udacityInstance.taskForGetUserData { (result, error) -> Void in\n            if let userData: AnyObject  = result{\n                let userDictionary = userData[\"user\"] as! NSDictionary\n                let userId = userDictionary[\"key\"] as! String\n                \n                //Check for existing pin\n                self.parseInstance.queryExistingLocation(userId, completionHandler: { (success, error) -> Void in\n                    if let objectId = success{\n                        dispatch_async(dispatch_get_main_queue(), { () -> Void in\n                            let pinAlertController = UIAlertController(title: nil, message: \"You have already posted a location. Would you like to overwrite your current location?\", preferredStyle: .Alert)\n                            let overWriteAction = UIAlertAction(title: \"Overwrite\", style: UIAlertActionStyle.Default, handler: { (action) -> Void in\n                                let controller = self.storyboard!.instantiateViewControllerWithIdentifier(\"MapGeoCoder\") \n                                self.presentViewController(controller, animated: true, completion: nil)\n                            })\n                            //Prompt user to overwrite\n                            let cancelAction = UIAlertAction(title: \"Cancel\", style: UIAlertActionStyle.Cancel, handler:nil)\n                            pinAlertController.addAction(cancelAction)\n                            pinAlertController.addAction(overWriteAction)\n                            self.presentViewController(pinAlertController, animated: true, completion: nil)\n                        })\n                    }else{\n                        let controller = self.storyboard!.instantiateViewControllerWithIdentifier(\"MapGeoCoder\") \n                        self.presentViewController(controller, animated: true, completion: nil)\n                    }\n                })\n            }\n        }\n    }\n    \n    func refreshData(){\n        self.retrieveStudentLocations()\n    }\n    \n    @IBAction func logoutButton(sender: UIBarButtonItem) {\n        udacityInstance.taskForLogout()\n        dispatch_async(dispatch_get_main_queue(), { () -> Void in\n            let loginController = self.storyboard!.instantiateViewControllerWithIdentifier(\"LoginViewController\") ",
 }
]
